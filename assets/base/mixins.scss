@mixin custom-text-size($desktopFontSize, $mobileFontSize, $desktopLineHeight, $mobileLineHeight) {
  @include poly-fluid-sizing('font-size', ($laptop: $desktopFontSize, $mobile: $mobileFontSize));
  @include poly-fluid-sizing('line-height', ($laptop: $desktopLineHeight, $mobile: $mobileLineHeight));
}

@mixin text-mobile-margin($top, $bottom) {
  margin: $top 30px $bottom 30px;
}

@mixin flex-center($alg: column) {
  display: flex;
  flex-direction: $alg;
  align-items: center;
  justify-content: center;
}

@mixin flex-box($direction: column, $align: center, $justify: center) {
  display: flex;
  flex-direction: $direction;
  align-items: $align;
  justify-content: $justify;
}

@mixin aspect-ratio($w, $h) {
  width: 100vw;
  $percent: ($h / $w) * 100vw;
  height: $percent;
}

@mixin responsive-font-size() {
  font-size: calc(3vw + 2.5vh + 2vmin);
  line-height: calc(3.2vw + 2.5vh + 2vmin);
}


@mixin is-aligned($content:center, $items:center) {
  display: flex;
  justify-content: $content;
  align-items: $items;
}

@mixin asp-ratio-height($width, $height) {
  height: $height / $width * 100vw;
}


//@function linear-interpolation($map) {
//  $keys: map-keys($map);
//  @if (length($keys) != 2) {
//    @error "linear-interpolation() $map must be exactly 2 values";
//  }
//  // The slope
//  $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1)))/(nth($keys, 2) - nth($keys,1));
//
//  // The y-intercept
//  $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);
//
//  // Determine if the sign should be positive or negative
//  $sign: "+";
//  @if ($b < 0) {
//    $sign: "-";
//    $b: abs($b);
//  }
//
//  @return calc(#{$m*100}vw #{$sign} #{$b});
//}

@function map-sort($map) {
  $keys: list-sort(map-keys($map));
  $sortedMap: ();
  @each $key in $keys {
    $sortedMap: map-merge($sortedMap, ($key: map-get($map, $key)));
  }
  @return $sortedMap;
}

@function list-sort($list) {
  $sortedlist: ();
  @while length($list) > 0 {
    $value: nth($list,1);
    @each $item in $list {
      @if $item < $value {
        $value: $item;
      }
    }
    $sortedlist: append($sortedlist, $value, 'space');
    $list: list-remove($list, index($list, $value));
  }
  @return $sortedlist;
}

@function list-remove($list, $index) {
  $newList: ();
  @for $i from 1 through length($list) {
    @if $i != $index {
      $newList: append($newList, nth($list,$i), 'space');
    }
  }
  @return $newList;
}

/// poly-fluid-sizing
/// Generate linear interpolated size values through multiple break points
/// @param $property - A string CSS property name
/// @param $map - A Sass map of viewport unit and size value pairs
/// @requires function linear-interpolation
/// @requires function map-sort
/// @example
///   @include poly-fluid-sizing('font-size', (576px: 22px, 768px: 24px, 992px: 34px));
@mixin poly-fluid-sizing($property, $map) {
  // Get the number of provided breakpoints
  $length: length(map-keys($map));

  // Error if the number of breakpoints is < 2
  @if ($length < 2) {
    @error "poly-fluid-sizing() $map requires at least values"
  }

  // Sort the map by viewport width (key)
  $map: map-sort($map);
  $keys: map-keys($map);

  // Minimum size
  #{$property}: map-get($map, nth($keys,1));

  // Interpolated size through breakpoints
  @for $i from 1 through ($length - 1) {
    @media (min-width:nth($keys,$i)) {
      $value1: map-get($map, nth($keys,$i));
      $value2: map-get($map, nth($keys,($i + 1)));
      // If values are not equal, perform linear interpolation
      @if ($value1 != $value2) {
        #{$property}: linear-interpolation((nth($keys,$i): $value1, nth($keys,($i+1)): $value2));
      } @else {
        #{$property}: $value1;
      }
    }
  }

  // Maxmimum size
  @media (min-width:nth($keys,$length)) {
    #{$property}: map-get($map, nth($keys,$length));
  }
}

@function least-squares-fit($map) {

  // Get the number of provided breakpoints
  $length: length(map-keys($map));

  // Error if the number of breakpoints is < 2
  @if ($length < 2) {
    @error "leastSquaresFit() $map must be at least 2 values"
  }

  // Calculate the Means
  $resTotal: 0;
  $valueTotal: 0;
  @each $res, $value in $map {
    $resTotal: $resTotal + $res;
    $valueTotal: $valueTotal + $value;
  }
  $resMean: $resTotal/$length;
  $valueMean: $valueTotal/$length;

  // Calculate some other stuff
  $multipliedDiff: 0;
  $squaredDiff: 0;
  @each $res, $value in $map {

    // Differences from means
    $resDiff: $res - $resMean;
    $valueDiff: $value - $valueMean;

    // Sum of multiplied differences
    $multipliedDiff: $multipliedDiff + ($resDiff * $valueDiff);

    // Sum of squared resolution differences
    $squaredDiff: $squaredDiff + ($resDiff * $resDiff);
  }

  // Calculate the Slope
  $m: $multipliedDiff / $squaredDiff;

  // Calculate the Y-Intercept
  $b: $valueMean - ($m * $resMean);

  // Return the CSS calc equation
  @return calc(#{$m*100}vw + #{$b});

}

@mixin container {
  width: calc(100% - 150px);
  margin: 0 auto;
  @include break-max(1400px) {
    width: 100%;
  }
}

@mixin white-arrow {
  background-repeat: no-repeat;
  background-position: center;
  background-image: url("data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='40px' height='23px' viewBox='0 0 40 23' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Cg id='Symbols' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'%3E%3Cg id='pattern-/-arrow-right' transform='translate(-20.000000, -28.000000)' fill='%23FFFFFF' fill-rule='nonzero'%3E%3Cpath d='M49.5167829,28.1976874 C49.2672848,27.9406162 48.8388438,27.9381179 48.5994232,28.1677339 C48.3549638,28.4023463 48.337325,28.8316566 48.5691779,29.076243 L57.8634274,38.8596953 L20.6451647,38.8596953 C20.2898209,38.8596953 20,39.14672 20,39.4986355 C20,39.850551 20.2898209,40.1375757 20.6451647,40.1375757 L57.8634274,40.1375757 L48.5691779,49.921028 C48.3373186,50.1656207 48.3499251,50.599902 48.5994232,50.8295371 C48.8463987,51.0591594 49.2471041,51.0641495 49.5167829,50.79959 L59.8394185,39.9376066 C60.0838779,39.6381034 60.0208711,39.2711919 59.8394185,39.0590638 L49.5167829,28.1976874 Z' id='arrow'%3E%3C/path%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
}

